import { IContext, IPayload } from "./index.d";
import BookResolver from "./resolvers/book.resolver";
import UserResolver from "./resolvers/user.resolver";
import datasource from "./lib/datasource";
import { ApolloServer } from "@apollo/server";
import { buildSchema } from "type-graphql";
import { startStandaloneServer } from "@apollo/server/standalone";
import "reflect-metadata";
import UserService from "./services/user.service";
import { AuthChecker } from "./lib/authchecker";

async function main() {
  const schema = await buildSchema({
    resolvers: [BookResolver, UserResolver],
    validate: false,
    authChecker: AuthChecker,
  });
  const server = new ApolloServer({
    schema,
  });

  const { url } = await startStandaloneServer(server, {
    listen: { port: 4000 },
    context: async ({ req }): Promise<IContext> => {
      let user = null; //le user est null par d√©faut, si le token est indiqu√© puis v√©rifi√©, √† ce moment l√† le user deviendra celui r√©cup√©r√© en base de donn√©es
      const payload = (await new UserService().getAndCheckToken(
        req.headers.authorization
      )) as IPayload; //on r√©cup√®re depuis "Bearer <token>" le token pour en v√©rifier ensuite l'authenticit√© s'il est renseign√©
      if (payload) {
        // si un payload a pu √™tre r√©cup√©r√© du token, on va chercher, √† partir de l'email stock√© dedans, le user pour pouvoir l'authentifier sur l'ensemble du contexte
        user = await new UserService().findByEmail(payload?.email);
      }
      //le return ci dessous va transmettre √† tous les r√©solveurs, l'objet retourn√© gr√¢ce √† @Ctx pour typegraphql ou le troisieme argument du r√©solveur dans le cas de graphql tout court (n'oubliez pas : parent, arguments, contexte, infos)
      return {
        user,
      };
    },
  });

  await datasource.initialize();
  console.log(`üöÄ  Server ready at: ${url}`);
}

main();
